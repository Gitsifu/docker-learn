<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.example</groupId>
	<artifactId>docker-learn</artifactId>
	<version>v1.0</version>
	<packaging>jar</packaging>

	<name>docker-learn</name>
	<description>Demo project for Spring Boot</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.8.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>

		<resources><!-- 使用@@站位符，输出Dockerfile至docker文件夹 -->
			<resource>
				<!--指定Dockerfile目录-->
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
				<includes>
					<!--Dockerfile文件名称-->
					<include>Dockerfile</include>
				</includes>
				git push origin --delete tag
			</resource>
		</resources>


		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.4.14</version>
				<configuration>
					<!--指定Docker镜像的完整名称，其中${project.groupId}为仓库名，
					${project.artifactId}为镜像名，${project.version}为标签名-->
					<imageName>
						${project.groupId}/${project.artifactId}:${project.version}
					</imageName>
					<!--指定Dockerfile文件所在的目录，指定${project.build.outputDirectory}
					是为了读取经Maven资源过滤后的Dockerfile文件，
					该文件中的@project.build.finalName@占位符此时已经被替换为实际内容-->
					<dockerDirectory>
						${project.build.outputDirectory}
					</dockerDirectory>
					<resources>
						<resource>
							<!--指定需要复制的根目录，其中${project.build.directory}表示target目录-->
							<directory>
								${project.build.directory}
							</directory>
							<!--用于指定需要赋值的文件，即为Maven打包后生成的jar文件-->
							<include>${project.build.finalName}.jar</include>
						</resource>
					</resources>
				</configuration>
			</plugin>
		</plugins>
	</build>


</project>
